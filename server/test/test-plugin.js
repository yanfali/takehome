// this file contains a test harness that was auto-generated by fastify-openapi-glue
// running the tests directly after generation will probably fail as the parameters
// need to be manually added.

import tap from "tap";
const test = tap.test;
import Fastify from "fastify";
import fastifyPlugin from "../index.js";
import service from "../service.js";

const specification = "../openApi.json";


const opts = {
  specification,
  service
};


// Operation: postAlertSave
// URL: /alert/save
// summary:  Save an alert
  // req.body
  //   type: object
  //   required:
  //     - message
  //     - frequency
  //     - emailRecipients
  //   properties:
  //     message:
  //       type: string
  //       minLength: 1
  //       maxLength: 1000
  //     frequency:
  //       type: string
  //       enum:
  //         - hourly
  //         - daily
  //     emailRecipients:
  //       type: array
  //       items:
  //         type: string
  //         format: email
  //       minLength: 1
  //       maxLength: 10
  //
  // valid responses
  //   '200':
  //     description: successful operation
  //     schema:
  //       type: object
  //       properties: &ref_0
  //         code:
  //           type: integer
  //           format: int32
  //         type:
  //           type: string
  //         message:
  //           type: string
  //   '400':
  //     description: Invalid Alert
  //     schema:
  //       type: object
  //       properties: *ref_0
  //   '500':
  //     description: Something bad happened
  //     schema:
  //       type: object
  //       properties: *ref_0
  //


test("testing postAlertSave", t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: "POST",
      url: "/v1/alert/save",
      payload: undefined, //insert body data here!!
      headers: undefined 
    },
    (err, res) => {
      t.error(err);
      t.equal(res.statusCode, 200);
    }
  );
});



// Operation: getAlertTest
// URL: /alert/test
// summary:  Test saved alerts
  // valid responses
  //   '200':
  //     description: successful test
  //     schema:
  //       type: object
  //       properties: &ref_0
  //         code:
  //           type: integer
  //           format: int32
  //         type:
  //           type: string
  //         message:
  //           type: string
  //   '418':
  //     description: No alerts registered
  //     schema:
  //       type: object
  //       properties: *ref_0
  //   '500':
  //     description: Something bad happened
  //     schema:
  //       type: object
  //       properties: *ref_0
  //


test("testing getAlertTest", t => {
  t.plan(2);
  const fastify = Fastify();
  fastify.register(fastifyPlugin, opts);

  fastify.inject(
    {
      method: "GET",
      url: "/v1/alert/test",
      payload: undefined, 
      headers: undefined 
    },
    (err, res) => {
      t.error(err);
      t.equal(res.statusCode, 200);
    }
  );
});

